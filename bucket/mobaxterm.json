{
    "version": "23.3",
    "description": "Enhanced terminal for Windows with X11 server, tabbed SSH client, network tools and much more.",
    "homepage": "https://mobaxterm.mobatek.net/",
    "license": {
        "identifier": "Freeware",
        "url": "https://mobaxterm.mobatek.net/license.html"
    },
    "url": "https://download.mobatek.net/2332023092000531/MobaXterm_Portable_v23.3.zip",
    "hash": "6817027b3ae28f6a9668cb413b5f3e00088367e7777bed2b9d548dc76bb6f05a",
    "pre_install": [
        "    # Rename executable",
        "Get-ChildItem \"$dir\" 'mobaxterm*.exe' | Select-Object -First 1 | Rename-Item -NewName 'MobaXterm.exe'",
        "    # Create files for persisting",
        "function PersistsFile([String] $file) {",
        "    if (!(Test-Path \"$persist_dir\\$file\")) {",
        "        New-Item \"$dir\\$file\" -Type File | Out-Null",
        "    }",
        "}",
        "@('MobaXterm backup.zip', 'MobaXterm.ini') | ForEach-Object { PersistsFile $_ }"
    ],
    "post_install": [
        "# Add the following script for generating license",
        "$VariantBase64Table = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='",
        "$VariantBase64Dict = @{}",
        "$VariantBase64ReverseDict = @{}",
        "for ($i = 0; $i -lt $VariantBase64Table.Length; $i++) {",
        "    $VariantBase64Dict[$i] = $VariantBase64Table[$i]",
        "    $VariantBase64ReverseDict[$VariantBase64Table[$i]] = $i",
        "}",
        "$LicenseType = @{",
        "    Professional = 1",
        "    Educational = 3",
        "    Personal = 4",
        "}",
        "function VariantBase64Encode {",
        "    param (",
        "        [byte[]]$bs",
        "    )",
        "",
        "    $result = ''",
        "    $left_bytes = 0",
        "    $blocks_count = [Math]::DivRem($bs.Length, 3, [ref] $left_bytes)",
        "    for ($i = 0; $i -lt $blocks_count; $i++) {",
        "        $startIndex = 3 * $i",
        "        $byteArray = $bs[$startIndex..($startIndex + 2)]",
        "        $coding_int = ($byteArray[0]) + ($byteArray[1] * 256) + ($byteArray[2] * 256 * 256)",
        "        $block = $VariantBase64Dict[$coding_int -band 0x3f]",
        "        $block += $VariantBase64Dict[($coding_int -shr 6) -band 0x3f]",
        "        $block += $VariantBase64Dict[($coding_int -shr 12) -band 0x3f]",
        "        $block += $VariantBase64Dict[($coding_int -shr 18) -band 0x3f]",
        "        $result += $block",
        "    }",
        "    if ($left_bytes -eq 0) {",
        "        return $result",
        "    }",
        "    elseif ($left_bytes -eq 1) {",
        "        $coding_int = [BitConverter]::ToInt32($bs, 3 * $blocks_count)",
        "        $block = $VariantBase64Dict[$coding_int -band 0x3f]",
        "        $block += $VariantBase64Dict[($coding_int -shr 6) -band 0x3f]",
        "        $result += $block",
        "        return $result",
        "    }",
        "    else {",
        "        $coding_int = [BitConverter]::ToInt32($bs, 3 * $blocks_count)",
        "        $block = $VariantBase64Dict[$coding_int -band 0x3f]",
        "        $block += $VariantBase64Dict[($coding_int -shr 6) -band 0x3f]",
        "        $block += $VariantBase64Dict[($coding_int -shr 12) -band 0x3f]",
        "        $result += $block",
        "        return $result",
        "    }",
        "}",
        "function EncryptBytes {",
        "    param (",
        "        [int]$key,",
        "        [byte[]]$bs",
        "    )",
        "",
        "    $result = [byte[]]::new($bs.Length)",
        "    for ($i = 0; $i -lt $bs.Length; $i++) {",
        "        $result[$i] = $bs[$i] -bxor (($key -shr 8) -band 0xff)",
        "        $key = ($result[$i] -band $key) -bor 0x482D",
        "    }",
        "    return $result",
        "}",
        "function GenerateLicense($Type, $Count, $UserName, $MajorVersion, $MinorVersion) {",
        "    if ($Count -lt 0) {",
        "        throw \"Count cannot be negative.\"",
        "    }",
        "    $three = 3",
        "    $six = 6",
        "    $LicenseString = \"$Type#$UserName|$MajorVersion$MinorVersion#$Count#$MajorVersion$three$MinorVersion$six$MinorVersion#0#0#0#\"",
        "    $LicenseStringBytes = [Text.Encoding]::ASCII.GetBytes($LicenseString)",
        "    $EncryptBytes = EncryptBytes -key 0x787 -bs $LicenseStringBytes",
        "    $EncodedLicenseString = VariantBase64Encode -bs $EncryptBytes",
        "    $zipFilePath = Join-Path $dir 'Custom.mxtpro'",
        "    if (Test-Path $zipFilePath) {",
        "        Remove-Item $zipFilePath -Force | Out-Null",
        "    }",
        "    New-Item -ItemType File -Path $zipFilePath -Force | Out-Null",
        "    Add-Type -AssemblyName System.IO.Compression.FileSystem",
        "    $zip = [System.IO.Compression.ZipFile]::Open($zipFilePath, 'Update')",
        "    $zipEntry = $zip.CreateEntry('Pro.key')",
        "    $zipEntryStream = $zipEntry.Open()",
        "    $entryWriter = [IO.StreamWriter]::new($zipEntryStream)",
        "    $entryWriter.Write($EncodedLicenseString)",
        "    $entryWriter.Dispose()",
        "    $zip.Dispose()",
        "    Write-Host '[*] Success!'",
        "    Write-Host \"[*] License generated: $zipFilePath\"",
        "    Write-Host",
        "}",
        "    $UserName = $env:USERNAME",
        "    $Version = $version",
        "    $MajorVersion, $MinorVersion = $Version.ToString().Split('.')",
        "    $Type = $LicenseType.Professional",
        "    GenerateLicense $Type 1 $UserName $MajorVersion $MinorVersion"
    ],
    "bin": "MobaXterm.exe",
    "shortcuts": [
        [
            "MobaXterm.exe",
            "MobaXterm Personal"
        ]
    ],
    "persist": [
        "MobaXterm.ini",
        "MobaXterm backup.zip"
    ],
    "checkver": {
        "url": "https://mobaxterm.mobatek.net/download-home-edition.html",
        "regex": "//download.mobatek.net/(?<random>[\\d]+)/MobaXterm_Portable_v([\\d.]+)\\.zip"
    },
    "autoupdate": {
        "url": "https://download.mobatek.net/$matchRandom/MobaXterm_Portable_v$version.zip"
    }
}
